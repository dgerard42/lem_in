# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    notes.txt                                          :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: dgerard <marvin@42.fr>                     +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2018/01/20 18:51:22 by dgerard           #+#    #+#              #
#    Updated: 2018/01/20 19:35:42 by dgerard          ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

__DIJKSTRA'S ALGORITHM___________
~ Be at the starting node
	>> have lists of visited and unvisited nodes
	>> for each node, keep track of
		>> known shortest distance from start
		>> previous node
~ look for the shortest path to any unvisited adjacent node
~ if the path you find to the node is the shortest to start, replace
~ move to the node that is shortest distance from last
~ add distance from start to distance to next nodes from there
~ go with lowest total distance
more simply:

>> Let the distance of start vertex from start vertex = 0
>> Let the distance of all the other vertices from start = infinity

>> While shortest path looking
	>> visit the unvisited vertex with the smallest know distance from the start
		vertex
	>> for the current vertex examine its unvisited neighbors
	>> for the current vertex, calculate distance of each neighbor from start
		vertex
	>> if the calculated distance of a vertex is less than the known distance,
		update the shortest distance
	>> update the previous vertex for each of the updated distances
	>> add the current vertex to the visited vertex list
	>> add the current vertex to the list of visited vertices
>> Until all vertices visited

__PLANNING BEFORE START___________

To move all the ants within the shortest amount of time
~ you need to find the shortest path
~ but you need to also to find all possible entrance points into the last room
~ and from there, you need to find the shortest non intersecting path(s) that
	will allow the ants to move into the last tunnel in as large a number as
	possible

memorize_rooms
learn_connections
find paths
	>> save paths into char arrays in a struct?
	>> then just print the
send ants
	>> print from the paths array correctly
destroy colony
	>> free eveything correctly!

thanks Ian
>> make sure you do not overlap paths
>> record visited and unvisited rooms

Brandon
>> 2 linked lists
>> one list of nodes (rooms)
>> one list of connections to all the other nodes

__TASKS TO COMPLETE___________
>> use ft_strchr instead of ft_strstr when you look for only one symbol
>> change how you are determining the end of the room section
	the ##end and ##start can both be at the beginning!!

>> make the ant printing functions
>> make Sergio make his freeing functions
>> do rigorous map input testing
>> do rigourous memory leak testing
>> norm everything (last)

>>don't print the start room

>>error handling
	>> no rooms							✓
	>> linking rooms that do not exist	(doesn't error out but runs w/o seg)
	>> no ants							✓
	>> no ##start						✓
	>> no ##end							✓
	>> no ##start and no ##end			✓
	>> no possible solution
	>> empty file						✓
	>> no file							✓ (but check again when you)
	>> nonsense file					✓
	>> the executable itself as a parameter
	>> the link sign but with nothing on the other side of the string (doesn't error but runs w/o seg)

>> no file and executable as parameter errors need to be handled when you make
	the final version that reads the files in the correct way, handling them
	before would be useless, you'd just have to do them over again

>> no possible solution error must be handled by Sergio in his algorithm

__SEND ANTS PSEUDOCODE___________
while all ants aren't done
	increase sent ants if all ants haven't been sent
	set the number of ants to be printed (sent ants - done ants)
	set the room as equal to the
	while the ants for this cycle aren't done printing
